// Code generated by MockGen. DO NOT EDIT.
// Source: vin_logger.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	reflect "reflect"

	internal "github.com/DIMO-Network/edge-network/internal"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockVINLogger is a mock of VINLogger interface.
type MockVINLogger struct {
	ctrl     *gomock.Controller
	recorder *MockVINLoggerMockRecorder
}

// MockVINLoggerMockRecorder is the mock recorder for MockVINLogger.
type MockVINLoggerMockRecorder struct {
	mock *MockVINLogger
}

// NewMockVINLogger creates a new mock instance.
func NewMockVINLogger(ctrl *gomock.Controller) *MockVINLogger {
	mock := &MockVINLogger{ctrl: ctrl}
	mock.recorder = &MockVINLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVINLogger) EXPECT() *MockVINLoggerMockRecorder {
	return m.recorder
}

// GetVIN mocks base method.
func (m *MockVINLogger) GetVIN(unitID uuid.UUID) (*internal.VINResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVIN", unitID)
	ret0, _ := ret[0].(*internal.VINResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVIN indicates an expected call of GetVIN.
func (mr *MockVINLoggerMockRecorder) GetVIN(unitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVIN", reflect.TypeOf((*MockVINLogger)(nil).GetVIN), unitID)
}
