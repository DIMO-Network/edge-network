// Code generated by MockGen. DO NOT EDIT.
// Source: storage_queue.go
//
// Generated by this command:
//
//	mockgen -source storage_queue.go -destination mocks/storage_queue_mock.go
//
// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	reflect "reflect"

	queue "github.com/DIMO-Network/edge-network/internal/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageQueue is a mock of StorageQueue interface.
type MockStorageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockStorageQueueMockRecorder
}

// MockStorageQueueMockRecorder is the mock recorder for MockStorageQueue.
type MockStorageQueueMockRecorder struct {
	mock *MockStorageQueue
}

// NewMockStorageQueue creates a new mock instance.
func NewMockStorageQueue(ctrl *gomock.Controller) *MockStorageQueue {
	mock := &MockStorageQueue{ctrl: ctrl}
	mock.recorder = &MockStorageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageQueue) EXPECT() *MockStorageQueueMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockStorageQueue) Dequeue() ([]queue.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].([]queue.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockStorageQueueMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockStorageQueue)(nil).Dequeue))
}

// Enqueue mocks base method.
func (m *MockStorageQueue) Enqueue(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockStorageQueueMockRecorder) Enqueue(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockStorageQueue)(nil).Enqueue), message)
}
