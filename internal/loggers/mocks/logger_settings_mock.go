// Code generated by MockGen. DO NOT EDIT.
// Source: logger_settings.go

// Package mock_loggers is a generated GoMock package.
package mock_loggers

import (
	reflect "reflect"

	loggers "github.com/DIMO-Network/edge-network/internal/loggers"
	gomock "github.com/golang/mock/gomock"
)

// MockLoggerSettingsService is a mock of LoggerSettingsService interface.
type MockLoggerSettingsService struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerSettingsServiceMockRecorder
}

// MockLoggerSettingsServiceMockRecorder is the mock recorder for MockLoggerSettingsService.
type MockLoggerSettingsServiceMockRecorder struct {
	mock *MockLoggerSettingsService
}

// NewMockLoggerSettingsService creates a new mock instance.
func NewMockLoggerSettingsService(ctrl *gomock.Controller) *MockLoggerSettingsService {
	mock := &MockLoggerSettingsService{ctrl: ctrl}
	mock.recorder = &MockLoggerSettingsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerSettingsService) EXPECT() *MockLoggerSettingsServiceMockRecorder {
	return m.recorder
}

// ReadPIDsConfig mocks base method.
func (m *MockLoggerSettingsService) ReadPIDsConfig() (*loggers.PIDLoggerSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPIDsConfig")
	ret0, _ := ret[0].(*loggers.PIDLoggerSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPIDsConfig indicates an expected call of ReadPIDsConfig.
func (mr *MockLoggerSettingsServiceMockRecorder) ReadPIDsConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPIDsConfig", reflect.TypeOf((*MockLoggerSettingsService)(nil).ReadPIDsConfig))
}

// ReadVINConfig mocks base method.
func (m *MockLoggerSettingsService) ReadVINConfig() (*loggers.VINLoggerSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVINConfig")
	ret0, _ := ret[0].(*loggers.VINLoggerSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadVINConfig indicates an expected call of ReadVINConfig.
func (mr *MockLoggerSettingsServiceMockRecorder) ReadVINConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVINConfig", reflect.TypeOf((*MockLoggerSettingsService)(nil).ReadVINConfig))
}

// WritePIDsConfig mocks base method.
func (m *MockLoggerSettingsService) WritePIDsConfig(settings loggers.PIDLoggerSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePIDsConfig", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePIDsConfig indicates an expected call of WritePIDsConfig.
func (mr *MockLoggerSettingsServiceMockRecorder) WritePIDsConfig(settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePIDsConfig", reflect.TypeOf((*MockLoggerSettingsService)(nil).WritePIDsConfig), settings)
}

// WriteVINConfig mocks base method.
func (m *MockLoggerSettingsService) WriteVINConfig(settings loggers.VINLoggerSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteVINConfig", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteVINConfig indicates an expected call of WriteVINConfig.
func (mr *MockLoggerSettingsServiceMockRecorder) WriteVINConfig(settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteVINConfig", reflect.TypeOf((*MockLoggerSettingsService)(nil).WriteVINConfig), settings)
}
