// Code generated by MockGen. DO NOT EDIT.
// Source: pid_logger.go

// Package mock_loggers is a generated GoMock package.
package mock_loggers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPIDLogger is a mock of PIDLogger interface.
type MockPIDLogger struct {
	ctrl     *gomock.Controller
	recorder *MockPIDLoggerMockRecorder
}

// MockPIDLoggerMockRecorder is the mock recorder for MockPIDLogger.
type MockPIDLoggerMockRecorder struct {
	mock *MockPIDLogger
}

// NewMockPIDLogger creates a new mock instance.
func NewMockPIDLogger(ctrl *gomock.Controller) *MockPIDLogger {
	mock := &MockPIDLogger{ctrl: ctrl}
	mock.recorder = &MockPIDLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPIDLogger) EXPECT() *MockPIDLoggerMockRecorder {
	return m.recorder
}

// ExecutePID mocks base method.
func (m *MockPIDLogger) ExecutePID(unitID uuid.UUID, header, mode, pid, formula, protocol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutePID", unitID, header, mode, pid, formula, protocol)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecutePID indicates an expected call of ExecutePID.
func (mr *MockPIDLoggerMockRecorder) ExecutePID(unitID, header, mode, pid, formula, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePID", reflect.TypeOf((*MockPIDLogger)(nil).ExecutePID), unitID, header, mode, pid, formula, protocol)
}
