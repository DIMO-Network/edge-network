// Code generated by MockGen. DO NOT EDIT.
// Source: data_sender.go

// Package mock_network is a generated GoMock package.
package mock_network

import (
	reflect "reflect"

	api "github.com/DIMO-Network/edge-network/internal/api"
	network "github.com/DIMO-Network/edge-network/internal/network"
	gomock "github.com/golang/mock/gomock"
)

// MockDataSender is a mock of DataSender interface.
type MockDataSender struct {
	ctrl     *gomock.Controller
	recorder *MockDataSenderMockRecorder
}

// MockDataSenderMockRecorder is the mock recorder for MockDataSender.
type MockDataSenderMockRecorder struct {
	mock *MockDataSender
}

// NewMockDataSender creates a new mock instance.
func NewMockDataSender(ctrl *gomock.Controller) *MockDataSender {
	mock := &MockDataSender{ctrl: ctrl}
	mock.recorder = &MockDataSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSender) EXPECT() *MockDataSenderMockRecorder {
	return m.recorder
}

// SendErrorPayload mocks base method.
func (m *MockDataSender) SendErrorPayload(err error, powerStatus *api.PowerStatusResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendErrorPayload", err, powerStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendErrorPayload indicates an expected call of SendErrorPayload.
func (mr *MockDataSenderMockRecorder) SendErrorPayload(err, powerStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorPayload", reflect.TypeOf((*MockDataSender)(nil).SendErrorPayload), err, powerStatus)
}

// SendPayload mocks base method.
func (m *MockDataSender) SendPayload(status *network.StatusUpdatePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPayload", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPayload indicates an expected call of SendPayload.
func (mr *MockDataSenderMockRecorder) SendPayload(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayload", reflect.TypeOf((*MockDataSender)(nil).SendPayload), status)
}
