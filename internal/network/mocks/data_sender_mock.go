// Code generated by MockGen. DO NOT EDIT.
// Source: data_sender.go
//
// Generated by this command:
//
//	mockgen -source data_sender.go -destination mocks/data_sender_mock.go
//
// Package mock_network is a generated GoMock package.
package mock_network

import (
	json "encoding/json"
	reflect "reflect"

	api "github.com/DIMO-Network/edge-network/internal/api"
	models "github.com/DIMO-Network/edge-network/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDataSender is a mock of DataSender interface.
type MockDataSender struct {
	ctrl     *gomock.Controller
	recorder *MockDataSenderMockRecorder
}

// MockDataSenderMockRecorder is the mock recorder for MockDataSender.
type MockDataSenderMockRecorder struct {
	mock *MockDataSender
}

// NewMockDataSender creates a new mock instance.
func NewMockDataSender(ctrl *gomock.Controller) *MockDataSender {
	mock := &MockDataSender{ctrl: ctrl}
	mock.recorder = &MockDataSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSender) EXPECT() *MockDataSenderMockRecorder {
	return m.recorder
}

// SendCanDumpData mocks base method.
func (m *MockDataSender) SendCanDumpData(data json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCanDumpData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCanDumpData indicates an expected call of SendCanDumpData.
func (mr *MockDataSenderMockRecorder) SendCanDumpData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCanDumpData", reflect.TypeOf((*MockDataSender)(nil).SendCanDumpData), data)
}

// SendDeviceNetworkData mocks base method.
func (m *MockDataSender) SendDeviceNetworkData(data models.DeviceNetworkData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeviceNetworkData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDeviceNetworkData indicates an expected call of SendDeviceNetworkData.
func (mr *MockDataSenderMockRecorder) SendDeviceNetworkData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeviceNetworkData", reflect.TypeOf((*MockDataSender)(nil).SendDeviceNetworkData), data)
}

// SendDeviceStatusData mocks base method.
func (m *MockDataSender) SendDeviceStatusData(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeviceStatusData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDeviceStatusData indicates an expected call of SendDeviceStatusData.
func (mr *MockDataSenderMockRecorder) SendDeviceStatusData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeviceStatusData", reflect.TypeOf((*MockDataSender)(nil).SendDeviceStatusData), data)
}

// SendErrorPayload mocks base method.
func (m *MockDataSender) SendErrorPayload(err error, powerStatus *api.PowerStatusResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendErrorPayload", err, powerStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendErrorPayload indicates an expected call of SendErrorPayload.
func (mr *MockDataSenderMockRecorder) SendErrorPayload(err, powerStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorPayload", reflect.TypeOf((*MockDataSender)(nil).SendErrorPayload), err, powerStatus)
}

// SendFingerprintData mocks base method.
func (m *MockDataSender) SendFingerprintData(data models.FingerprintData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFingerprintData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFingerprintData indicates an expected call of SendFingerprintData.
func (mr *MockDataSenderMockRecorder) SendFingerprintData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFingerprintData", reflect.TypeOf((*MockDataSender)(nil).SendFingerprintData), data)
}

// SendLogsData mocks base method.
func (m *MockDataSender) SendLogsData(data models.ErrorsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogsData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLogsData indicates an expected call of SendLogsData.
func (mr *MockDataSenderMockRecorder) SendLogsData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogsData", reflect.TypeOf((*MockDataSender)(nil).SendLogsData), data)
}

// SetVehicleInfo mocks base method.
func (m *MockDataSender) SetVehicleInfo(vehicleInfo models.VehicleInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVehicleInfo", vehicleInfo)
}

// SetVehicleInfo indicates an expected call of SetVehicleInfo.
func (mr *MockDataSenderMockRecorder) SetVehicleInfo(vehicleInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVehicleInfo", reflect.TypeOf((*MockDataSender)(nil).SetVehicleInfo), vehicleInfo)
}
